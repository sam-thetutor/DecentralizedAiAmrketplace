type Task = 
 record {
   callbackId: nat;
   from: principal;
   prompt: text;
   to: principal;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type AgentDescription = record {
                          description:
                           record {
                             expertise: text;
                             input: record {
                                      _type: text;
                                      description: text;
                                    };
                             output: record {
                                       _type: text;
                                       description: text;
                                     };
                           };};
type Agent = 
 record {
   Price: nat;
   metadata: AgentDescription;
   reputation: nat;
 };
service : {
  assignTaskToAgent: (nat, principal) -> (Result);
  getAgentPrice: (principal) -> (nat) query;
  getAllAgentsData: () -> (vec record {
                                 principal;
                                 Agent;
                               }) query;
  getCurrentTaskId: () -> (nat) query;
  getTask: (nat) -> (opt Task) query;
  getTaskAgent: (nat) -> (opt principal) query;
  queryAgent: (text, principal, nat) -> (Result_1);
  registerAgent: (principal, AgentDescription, nat) -> (Result);
  respond: (text, nat) -> (Result);
  setAgentPrice: (nat) -> (Result);
  updateAgent: (AgentDescription) -> (Result);
  updateBalance: (nat) -> (Result);
}
